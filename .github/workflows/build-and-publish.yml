name: Build and Publish Docker Images

# This workflow builds and publishes Docker images for both frontend and backend.
# It can be triggered manually with custom Azure configuration inputs.
#
# Manual trigger usage:
# - Go to Actions tab in GitHub
# - Select "Build and Publish Docker Images" workflow
# - Click "Run workflow"
# - Fill in the Azure configuration as needed:
#   - azure_client_id: Your Azure AD Application (Client) ID
#   - azure_tenant_id: Your Azure AD Directory (Tenant) ID or 'common'
#   - auth_dev_mode: Set to true for development builds
#   - websocket_url: Backend WebSocket URL for production deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      azure_client_id:
        description: 'Azure AD Client ID'
        required: false
        default: '72da9d9f-22a6-45c3-82ec-7b214eca7590'
        type: string
      azure_tenant_id:
        description: 'Azure AD Tenant ID'
        required: false
        default: 'ee0a571a-7499-4994-b349-164a9150b094'
        type: string
      auth_dev_mode:
        description: 'Enable development authentication mode'
        required: false
        default: false
        type: boolean
      websocket_url:
        description: 'WebSocket URL for the backend'
        required: false
        default: ''
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install dependencies
      run: npm ci

    - name: Generate types
      run: |
        cargo test -p game-types
        mkdir -p frontend/src/types/generated/
        cp game-types/bindings/*.ts frontend/src/types/generated/
        echo "Generated TypeScript files:"
        ls -la frontend/src/types/generated/


    - name: Build frontend
      env:
        VITE_AZURE_CLIENT_ID: ${{ github.event.inputs.azure_client_id || secrets.AZURE_CLIENT_ID || '72da9d9f-22a6-45c3-82ec-7b214eca7590' }}
        VITE_AZURE_TENANT_ID: ${{ github.event.inputs.azure_tenant_id || secrets.AZURE_TENANT_ID || 'ee0a571a-7499-4994-b349-164a9150b094' }}
        VITE_AUTH_DEV_MODE: ${{ github.event.inputs.auth_dev_mode || 'false' }}
        VITE_WS_URL: ${{ github.event.inputs.websocket_url || secrets.WEBSOCKET_URL || 'wss://wordarena.chrismiller.xyz/ws' }}
      run: npm run build:frontend

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./frontend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VITE_AZURE_CLIENT_ID=${{ github.event.inputs.azure_client_id || secrets.AZURE_CLIENT_ID || '72da9d9f-22a6-45c3-82ec-7b214eca7590' }}
          VITE_AZURE_TENANT_ID=${{ github.event.inputs.azure_tenant_id || secrets.AZURE_TENANT_ID || 'ee0a571a-7499-4994-b349-164a9150b094' }}
          VITE_AUTH_DEV_MODE=${{ github.event.inputs.auth_dev_mode || 'false' }}
          VITE_WS_URL=${{ github.event.inputs.websocket_url || secrets.WEBSOCKET_URL || 'wss://wordarena.chrismiller.xyz/ws' }}

  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Generate word lists
      run: |
        chmod +x scripts/download_and_split_words.sh
        bash scripts/download_and_split_words.sh word_lists
        echo "Word list files created:"
        ls -la word_lists/
        # Also create in game-server/data for compatibility
        mkdir -p game-server/data
        cp -r word_lists/* game-server/data/
        echo "Copied to game-server/data:"
        ls -la game-server/data/

    - name: Run backend tests
      run: |
        export WORD_LISTS_DIR="$(pwd)/word_lists"
        echo "WORD_LISTS_DIR is set to: $WORD_LISTS_DIR"
        echo "Checking if word_lists directory exists:"
        ls -la word_lists/
        cargo test --workspace

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

